/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { Activity } from '../activity'
import { Entity } from './entity'

export type ClientCitationIconName =
    | 'Microsoft Word'
    | 'Microsoft Excel'
    | 'Microsoft PowerPoint'
    | 'Microsoft OneNote'
    | 'Microsoft SharePoint'
    | 'Microsoft Visio'
    | 'Microsoft Loop'
    | 'Microsoft Whiteboard'
    | 'Adobe Illustrator'
    | 'Adobe Photoshop'
    | 'Adobe InDesign'
    | 'Adobe Flash'
    | 'Sketch'
    | 'Source Code'
    | 'Image'
    | 'GIF'
    | 'Video'
    | 'Sound'
    | 'ZIP'
    | 'Text'
    | 'PDF'

/**
 * Represents a Teams client citation to be included in a message. See Bot messages with AI-generated content for more details.
 * https://learn.microsoft.com/en-us/microsoftteams/platform/bots/how-to/bot-messages-ai-generated-content?tabs=before%2Cbotmessage
 */
export interface ClientCitation {
  /**
     * Required; must be "Claim"
     */
  '@type': 'Claim';

  /**
     * Required. Number and position of the citation.
     */
  position: number;
  appearance: {
    /**
         * Required; Must be 'DigitalDocument'
         */
    '@type': 'DigitalDocument';

    /**
         * Name of the document. (max length 80)
         */
    name: string;

    /**
         * Stringified adaptive card with additional information about the citation.
         * It is rendered within the modal.
         */
    text?: string;

    /**
         * URL of the document. This will make the name of the citation clickable and direct the user to the specified URL.
         */
    url?: string;

    /**
         * Extract of the referenced content. (max length 160)
         */
    abstract: string;

    /**
         * Encoding format of the `citation.appearance.text` field.
         */
    encodingFormat?: 'application/vnd.microsoft.card.adaptive';

    /**
         * Information about the citationâ€™s icon.
         */
    image?: {
      '@type': 'ImageObject';

      /**
             * The image/icon name
             */
      name: ClientCitationIconName;
    };

    /**
         * Optional; set by developer. (max length 3) (max keyword length 28)
         */
    keywords?: string[];

    /**
         * Optional sensitivity content information.
         */
    usageInfo?: SensitivityUsageInfo;
  };
}

/**
 * Sensitivity usage info for content sent to the user. This is used to provide information about the content to the user. See ClientCitation for more information.
 */
export interface SensitivityUsageInfo {
  /**
     * Must be "https://schema.org/Message"
     */
  type: 'https://schema.org/Message';

  /**
     * Required; Set to CreativeWork;
     */
  '@type': 'CreativeWork';

  /**
     * Sensitivity description of the content
     */
  description?: string;

  /**
     * Sensitivity title of the content
     */
  name: string;

  /**
     * Optional; ignored in Teams.
     */
  position?: number;

  pattern?: {
    /**
         * Set to DefinedTerm
         */
    '@type': 'DefinedTerm';

    inDefinedTermSet: string;

    /**
         * Color
         */
    name: string;

    /**
         * e.g. #454545
         */
    termCode: string;
  };
}

export interface AIEntity extends Entity {
  /**
     * Required as 'https://schema.org/Message'
     */
  type: 'https://schema.org/Message';

  /**
     * Required as 'Message
     */
  '@type': 'Message';

  /**
     * Required as 'https://schema.org
     */
  '@context': 'https://schema.org';

  /**
     * Must be left blank. This is for Bot Framework schema.
     */
  '@id': '';

  /**
     * Indicate that the content was generated by AI.
     */
  additionalType: ['AIGeneratedContent'];

  /**
     * Optional; if citations object is included, the  sent activity will include the citations, referenced in the activity text.
     */
  citation?: ClientCitation[];

  /**
     * Optional; if usage_info object is included, the sent activity will include the sensitivity usage information.
     */
  usageInfo?: SensitivityUsageInfo;
}

export const addAIToActivity = (activity: Activity, citations?: ClientCitation[], usageInfo?: SensitivityUsageInfo): void => {
  const aiEntity: AIEntity = {
    type: 'https://schema.org/Message',
    '@type': 'Message',
    '@context': 'https://schema.org',
    '@id': '',
    additionalType: ['AIGeneratedContent'],
    citation: citations,
    usageInfo
  }
  activity.entities ??= []
  activity.entities.push(aiEntity)
}
